// Tic-Tac-Toe

// Board looks like:
//  1 | 2 | 3
//  ---------
//  4 | 5 | 6
//  ---------
//  7 | 8 | 9


char read_one_char() {
    // take the first char and ignore anything else, until reaching newline
    char res = readchar();
    while (readchar() != '\n') {}
    return res;
}

bool ask_play_again() {
    bool input_valid = false;
    bool result;
    while (!input_valid) {
        print("Would you like to play again? Y/N: ");
        char input = read_one_char();
        if (input == 'Y' || input == 'y') {
            input_valid = true;
            result = true;
        }
        if (input == 'N' || input == 'n') {
            input_valid = true;
            result = false;
        }
    }
    return result;
}

void print_board() {
    for (int i = 0; i < 9; i++) {
        printchar(board[i]);
        if (i % 3 == 2)
            print("\n---------\n");
        else
            print(" | ");
    }
}

void init_board() {
    for (int i = 0; i < 9; i++)
        board[i] = ' ';
}

char check_win_or_tie() {
    char winner = ' ';
    // check rows
    for (int row = 0; row < 3; row++)
        if (board[row][0] == board[row][1] && board[row][0] == board[row][2] && board[row][0] != ' ')
            winner = board[row][0];

    // check columns
    for (int col = 0; col < 3; col++)
        if (board[0][col] == board[1][col] && board[0][col] == board[2][col] && board[0][col] != ' ')
            winner = board[0][col];

    // check diagonals
    if (((board[0][0] == board[1][1] && board[0][0] == board[2][2]) || (board[0][2] == board[1][1] && board[0][2] == board[2][0])) && (board[1][1] != ' '))
        winner = board[1][1];

    return winner;
}

int get_next_move(bool player_X_turn) {
    int move = 0;
    while (move < 1 || move > 9 || board[move-1] != ' ') { // humans count from 1 :)
        print("Player ");
        if (player_X_turn) printchar('X');
        else               printchar('O');

        print(" turn:\n");
        move = readint();
    }
    return move;
}

char board[3][3];
int main() {
    bool still_playing = true;

    while (still_playing) {
        bool game_over = false;
        bool player_X_turn = true;
        int moves_so_far = 0;

        init_board();
        print_board();

        while (!game_over) {
            int move = get_next_move(player_X_turn);
            if (player_X_turn)
                board[move-1]='X';
            else
                board[move-1]='O';
            move = 0;
            player_X_turn = !player_X_turn;
            moves_so_far++;

            print_board();
            char winner = check_win_or_tie();

            // ---------- announce result ----------
            if (winner != ' ') {
                print("Player ");
                printchar(winner);
                print(" Won!\n");
                game_over = true;
            } else if (moves_so_far == 9) {
                print("Game is a tie!\n");
                game_over = true;
            }
        }

        if (ask_play_again() == true)
            print("Great! Let's start a new game...\n");
        else
            still_playing = false;
    }
    print("Goodbye :)\n");
}
